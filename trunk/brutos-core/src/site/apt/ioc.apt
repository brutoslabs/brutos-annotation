Inversão de controle e injeção de dependência

 O Brutos MVC pode ser integrado a qualquer container IoC, desde que esteja
 implementado.

 Atualmente o Brutos MVC pode ser integrado a um container IoC muito popular,
 o Spring.

 Para sua configuração não é necessário muito trabalho, basta informar
 qual provedor desse recurso será usado.

 Veja um exemplo abaixo:

-----
<controllers  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
   xmlns='http://brutos.sourceforge.net/schema/controllers'
   xmlns:context='http://brutos.sourceforge.net/schema/context'
   xsi:schemaLocation='
   http://brutos.sourceforge.net/schema/controllers
   http://brutos.sourceforge.net/schema/controllers/brutos-controllers-1.0.xsd
   http://brutos.sourceforge.net/schema/context
   http://brutos.sourceforge.net/schema/context/brutos-context-1.0.xsd'>

   <context:params>
       <context:param name="org.brandao.brutos.ioc.provider"
         value="br.myapp.MyIOCProvider"/>
   </context:params>

   ...

</controllers>
-----

* Usando o Spring IoC.

  Spring é um dos mais populares frameworks. Além disso, existem algumas características surpreendentes como AOP. Então se você gostaria de aproveitar esses recursos do Spring que não tem como reconstruir, você pode integrar sua aplicação Brutos com Spring sem muito trabalho.

 Para integrar o Brutos MVC com Spring basta usar o provedor SpringIOCProvider. Veja o exemplo abaixo:

-----
<controllers  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
   xmlns='http://brutos.sourceforge.net/schema/controllers'
   xmlns:context='http://brutos.sourceforge.net/schema/context'
   xsi:schemaLocation='
   http://brutos.sourceforge.net/schema/controllers
   http://brutos.sourceforge.net/schema/controllers/brutos-controllers-1.0.xsd
   http://brutos.sourceforge.net/schema/context
   http://brutos.sourceforge.net/schema/context/brutos-context-1.0.xsd'>

   <context:params>
       <context:param name="org.brandao.brutos.ioc.provider"
         value="org.brandao.brutos.ioc.SpringIOCProvider"/>
   </context:params>

   ...

</controllers>
-----

 Depois de feita essa configuração no Burtos MVC, basta fazer as configurações que você já está acostumado no Spring.

* Customizando um provedor IoC

 Se você precisa usar um container IoC que ainda o Brutos MVC não tem suporte, basta implementar os métodos abstratos da classe org.brandao.brutos.ioc.IOCProvider e configurar o Brutos MVC.

 Veja o exemplo abaixo:

-----
package br.myapp.ioc;

public class MyIOCProvider extends IOCProvider{

    public MyIOCProvider(){
    }

    public Object getBean( String name ){
      return null;
    }

    public Object getBean( Class clazz ){
        try{
            return clazz.newInstance();
        }
        catch( Exception e ){
            throw new BrutosException(e);
        }
    }

    public void configure( Properties properties ){
    }

    public abstract void destroy(){
    }

}
-----

 Para usar o recém criado provedor basta fazer como o exemplo abaixo:

-----
   <context:params>
       <context:param name="org.brandao.brutos.ioc.provider"
         value="br.myapp.ioc.MyIOCProvider"/>
   </context:params>
-----
