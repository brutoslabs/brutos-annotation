Mapeamento de beans

 Um recurso muito útil do Brutos MVC é o mapeamento de beans. Bem parecido com
 IoC. Com ele é possível construir as propriedades de um controlador ou até mesmo
 construir os parâmetros de uma ação.

* Instanciando um bean

 O mapeamento de beans somente é usado na criação das propriedades de um
 controlador e dos parâmetros de uma ação.

 Para que o Brutos MVC possa instanciar um bean, é  necessário definir como.
 Essa definição nada mais é que informar ao Brutos MVC como o bean deve ser construído.

 O elemento usado para se definir um bean é \<bean/\>. Sendo que o tipo do bean
 é definido pelo atributo target. Esse atributo é usado em dois casos:

 No primeiro caso, define a classe do bean que será construído, que se equivale
 ao new. Já no outro caso, é usado para invocar um método estático de uma
 fábrica para criar o objeto. O tipo do objeto retornado por esse método
 pode ser a mesma do bean ou não.

*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| Atributo              | Descrição                                                                                                             |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| name                  | Identificação o bean.                                                                                                |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| separator             | Representação da separação do bean das suas dependências.                                                             |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| index-format          | Representação de um índice. Essa opção somente é usada em Map, List e Set. Por padrão é usado "[$index]", onde $index |
|                       | representa o valor do índice                                                                                          |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| factory               | Fábrica do bean.                                                                                                      |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| method-factory        | Método da fábrica que irá instanciar o bean.                                                                          |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| target                | Classe alvo do mapeamento                                                                                             |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+

 Veja abaixo um exemplo:

------
<controller ...>
  <bean name="myBean" target="br.myproject.MyBean"/>
  <property bean="myBean" mapping="true"/>
</controller>
------

 Veja outro exemplo de como pode ser feito o mapeamento de um bean:

------
<controller ...>
    <action id="/myaction.jbrs">
      <parameter>
         <bean target="br.myproject.MyBean"/>
      </parameter>
    </action>
</controller>
------

* Injeção de dependência por construtor

 A injeção é feita invocando um construtor com um número específico de argumentos, sendo que cada um representa uma dependência. Também é equivalente a chamada de um método de uma fábrica com uma quantidade específica de argumentos para a construção de um bean.

 Sua definição é feita usando o elemento \<constructor-arg/\>. Somente é permitido o seu uso no elemento \<bean/\>.

 O elemento \<constructor-arg/\> possui os seguintes atributos:

*------------------+--------------------------------------------------------------------+
|Atributo          | Descrição                                                          |
*------------------+--------------------------------------------------------------------+
|bean              | Identificação do bean.                                             |
*------------------+--------------------------------------------------------------------+
|value             | Valor do argumento.                                                |
*------------------+--------------------------------------------------------------------+
|enum-property     | Usado no mapeamento de enum. Permite dois valores:                 |
|                  | ordinal: o enum é representado por um inteiro;                     |
|                  | string: o enum é representado por uma string.                      |
*------------------+--------------------------------------------------------------------+
|temporal-property | Usado no mapeamento de datas. É o formato com que a data está      |
|                  | representada.                                                      |
|                  | O formato é descrito na classe java.text.SimpleDateFormat.         |
*------------------+--------------------------------------------------------------------+
|mapping           | Se verdadeiro, o valor do argumento é obtido a partir de um        |
|                  | mapeamento pré-definido.                                           |
*------------------+--------------------------------------------------------------------+
|scope             | Escopo do bean.                                                   |
*------------------+--------------------------------------------------------------------+
|factory           | Classe responsável por processar o valor recebido.                 |
|                  | A classe deve implementar a interface org.brandao.brutos.type.Type.|
*------------------+--------------------------------------------------------------------+
| type	           | Tipo do argumento.                                                 |
*------------------+--------------------------------------------------------------------+

 Veja abaixo um exemplo de como é feita a injeção de dependência por construtor:

------
<bean name="MyBean" class="MySimpleClass">
    <constructor-arg>
        <value>100</value>
    </constructor-arg>
</bean>
------

* Injeção de dependência por método

 A injeção é feita invocando um método de um bean depois de instanciado.

 Sua definição é feita usando o elemento \<property/\>. Somente é permitido o seu uso nos elementos \<bean/\> e \<controller/\>.

 O elemento \<property/\> possui os seguintes atributos:

*------------------+--------------------------------------------------------------------+
|Atributo          | Descrição                                                          |
*------------------+--------------------------------------------------------------------+
|bean              | Identificação do bean.                                             |
*------------------+--------------------------------------------------------------------+
|name              | Nome da propriedade.                                               |
*------------------+--------------------------------------------------------------------+
|value             | Valor da propriedade.                                              |
*------------------+--------------------------------------------------------------------+
|enum-property     | Usado no mapeamento de enum. Permite dois valores:                 |
|                  | ordinal: o enum é representado por um inteiro;                     |
|                  | string: o enum é representado por uma string.                      |
*------------------+--------------------------------------------------------------------+
|temporal-property | Usado no mapeamento de datas. É o formato com que a data está      |
|                  | representada.                                                      |
|                  | O formato é descrito na classe java.text.SimpleDateFormat.         |
*------------------+--------------------------------------------------------------------+
|mapping           | Se verdadeiro, o valor da propriedade é obtido a partir de um      |
|                  | mapeamento pré-definido                                            |
*------------------+--------------------------------------------------------------------+
|scope             | Escopo do bean.                                                   |
*------------------+--------------------------------------------------------------------+
|factory           | Classe responsável por processar o valor recebido.                 |
|                  | A classe deve implementar a interface org.brandao.brutos.type.Type.|
*------------------+--------------------------------------------------------------------+

 Veja abaixo um exemplo de como é feita a injeção de dependência por método:

------
<bean name="MyBean" class="MySimpleClass">
    <property name="child">
        <ref bean="bean2"/>
    </property>
</bean>
------

* Injetando valores primitivos e String

 A injeção de valores primitivos e string são feitas usando o elemento \<value/\>.
 Somente é permitido o seu uso nos elementos \<constructor-arg/\> e \<property/\>.

 Veja alguns exemplos:

------
<bean name="MyBean" class="...">
    <constructor-arg>
        <value>100.0</value>
    </constructor-arg>
</bean>
------

------
<bean name="MyBean" class="...">
    <property name="myProperty">
        <value>My value</value>
    </property>
</bean>
------

------
<controller ...>
    <property name="myProperty">
        <value>My controller value</value>
    </property>
</controller>
------

* Referência a outros beans

 A injeção de beans é feita usando a tag \<ref/\>. Somente é permitido o seu uso nos elementos \<constructor-arg/\> e \<property/\>.

 O elemento \<ref/\> possui os seguintes atributos:

*------------------+--------------------------------------------------------------------+
|Atributo          | Descrição                                                          |
*------------------+--------------------------------------------------------------------+
|bean              | Identificação do bean.                                             |
*------------------+--------------------------------------------------------------------+
|value             | Valor.                                                             |
*------------------+--------------------------------------------------------------------+
|enum-property     | Usado no mapeamento de enum. Permite dois valores:                 |
|                  | ordinal: o enum é representado por um inteiro;                     |
|                  | string: o enum é representado por uma string.                      |
*------------------+--------------------------------------------------------------------+
|temporal-property | Usado no mapeamento de datas. É o formato com que a data está      |
|                  | representada.                                                      |
|                  | O formato é descrito na classe java.text.SimpleDateFormat.         |
*------------------+--------------------------------------------------------------------+
|mapping           | Se verdadeiro, o valor do argumento é obtido a partir de um        |
|                  | mapeamento pré-definido                                            |
*------------------+--------------------------------------------------------------------+
|scope             | Escopo do bean.                                                    |
*------------------+--------------------------------------------------------------------+
|factory           | Determina a classe responsável por processar o valor recebido.     |
|                  | A classe deve implementar a interface org.brandao.brutos.type.Type.|
*------------------+--------------------------------------------------------------------+

 Veja abaixo um exemplo:

------
<bean name="MyBean" class="...">
    <constructor-arg>
        <ref bean="beanName"/>
    </constructor-arg>
</bean>
------

* Coleções

 A injeção dos tipos List, Set, Map e Properties também são feitos com o elemento
 \<bean/\>. O que diferencia é o uso dos elementos \<element/\> e \<key/\>.
 O elemento \<key/\> somente é necessário para os tipos Map e Properties.

------
<bean name="..." target="java.util.LinkedList">
    <element target="java.lang.Integer">
        <constructor-arg bean="ids"/>
    </element>
</bean>

<bean name="..." target="java.util.HashSet">
    <element target="java.lang.Integer">
        <constructor-arg bean="ids"/>
    </element>
</bean>

<bean name="..." target="java.util.HashMap">
    <key target="java.lang.Integer">
        <constructor-arg bean="id_bean"/>
    </key>
    <element target="br.myproject.MyBean">
        <property name="id" bean="id_bean"/>
        <property name="name" bean="name_bean"/>
    </element>
</bean>

<bean name="..." target="java.util.Properties">
    <key target="java.lang.String">
        <constructor-arg bean="id"/>
    </key>
    <element target="java.lang.String">
        <constructor-arg bean="prop"/>
    </element>
</bean>
------
