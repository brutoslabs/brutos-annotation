Interceptadores

 O uso de interceptadores é necessário quando precisamos executar tarefas antes
 e/ou depois do controlador ser executado, normalmente usado para controle de
 acesso, validação de dados, controle de transação e geração de log.

 No Brutos web MVC é possível trabalhar com um ou mais interceptadores, podendo
 definir quais recursos serão interceptados, a ordem com que serão  executados
 e os parâmetros necessários para a sua configuração.

 Sua instância é controlada pelo container IOC, podendo assim, receber a injeção
 de objetos por construtor ou método.

 Um interceptador é definido com a tag \<interceptor/\>. Somente é permitido o seu
 uso no elemento \<interceptors/\>. O elemento \<interceptor/\> possui os seguintes
 atributos:

*----------+-------------------------------------------------------------+
| Atributo | Explicação                                                  |
*----------+-------------------------------------------------------------+
| name 	   | Nome que identifica o                                       |
|          | interceptador. Usado na configuração do container IOC.      |
*----------+-------------------------------------------------------------+
| class    | Nome completo da classe.                                    |
*----------+-------------------------------------------------------------+
| default  | Se verdadeiro, automaticamente todos os controladores serão |
|          | interceptados pelo interceptador.                           |
*----------+-------------------------------------------------------------+

 No exemplo a seguir, o interceptador é responsável por gerar um log e está
 configurado para interceptar todos os controladores. Veja logo a baixo o
 interceptador LoggerInterceptor e o trecho XML da configuração do mesmo:

------
public class LoggerInterceptor extends AbstractInterceptor{

  private Logger logger;

  public LoggerInterceptor( Logger logger ){
    this.logger = logger;
  }

  public void intercepted(InterceptorStack stack,
      InterceptorHandler handler) throws interceptedException {
    ...
  }

}
------

------
<interceptors>
  <interceptor class="LoggerInterceptor" name="loggerInterceptor" default="true"/>
</interceptors>

...

<beans>
  <bean name="loggerInterceptor" class="LoggerInterceptor">
    <constructor-arg>
      <ref bean="loggerInstance"/>
    </constructor-arg>
  </bean>
</beans>
------

* Referenciando um interceptador

 Para interceptar um controlador ou gerar uma pilha de interceptadores é
 necessário fazer uma referência a um interceptador. Essa referência é feita
 com a tag \<interceptor-ref/\>. Somente é permitido o seu uso nos elementos
 \<web-frame/\> e \<interceptor-stack/\>. O elemento \<interseptor-ref/\>
 possui o seguinte atributo:

*----------+--------------------------------------+
| Atributo | Explicação                           |
*----------+--------------------------------------+
| name 	   | Nome que identifica o interceptador. |
*----------+--------------------------------------+

 No exemplo a seguir o controlador é interceptado pelo loggerInterceptor:

------
<web-frame ...>
  <interceptor-ref name="loggerInterceptor"/>
</web-frame>
------

* Configurando o comportamento do interceptador

 É possível definir configurações globais ou específicas para cada controlador.
 Essa configuração é definida com a tag \<param/\>. Somente é permitido o seu
 uso nos elementos \<interceptor/\> e \<interceptor-ref/\>. O elemento \<param/\>
 possui o seguinte atributo:

*----------+--------------------+
| Atributo | Explicação         |
*----------*--------------------+
| name     | Nome do parâmetro. |
*----------+--------------------+

 No exemplo a seguir é definido um parâmetro global que é substituído em
 alguns controladores.

------
<interceptors>
  <interceptor class="LoggerInterceptor" name="loggerInterceptor">
    <param name="id">myDefaultLogger</param> //global
  </interceptor>
</interceptors>

...

<web-frame name="controllerA"...>
  <interceptor-ref name="loggerInterceptor">
    <param name="id">controllerALogger</param> //local
  </interceptor-ref>
</web-frame>

<web-frame name="controllerB"...>
  <interceptor-ref name="loggerInterceptor">
    <param name="id">controllerBLogger</param> // local
  </interceptor-ref>
</web-frame>

<web-frame name="controllerC"...>
  <interceptor-ref name="loggerInterceptor"/>
</web-frame>
------

* Definindo a ordem dos interceptadores

 Em alguns casos é necessário definir uma ordem para a execução dos
 interceptadores. Nesses casos então é conveniente utilizar uma pilha de
 interceptadores ("interceptor stack"). A forma de se  usar uma pilha de
 interceptadores é a mesma de um interceptador.

 Uma pilha de interceptadores é definida usando-se a tag \<interceptor-stack/\>.
 Somente é permitido o seu uso no elemento \<interceptors/\>. O elemento
 \<interceptor-stack/\> possui o seguinte atributo:

*----------+-----------------------------------+
| Atributo | Explicação                        |
*----------+-----------------------------------+
| name     | Nome da pilha de interceptadores. |
*----------+-----------------------------------+

 No exemplo a seguir é gerado uma pilha de interceptadores com o nome myStack.
 Que é usada em um determinado controlador.

------
<interceptors>
    <interceptor name="interceptor1" class="..."/>
    <interceptor name="interceptor2" class="..."/>
    <interceptor name="interceptor3" class="..."/>
    <interceptor-stack name="myStack">
        <interceptor-ref name="interceptor1"/>
        <interceptor-ref name="interceptor2"/>
        <interceptor-ref name="interceptor3"/>
    </interceptor-stack>
</interceptors>
...
<web-frame ...>
  <interceptor-ref name="myStack"/>
</web-frame>
------

 Da mesma forma que é possível configurar o comportamento de um interceptador,
 também é possível configurar o comportamento de uma pilha de interceptadores.
 No exemplo a seguir, o interceptador "interceptor2" possui configurações
 distintas em dois controladores, enquanto que os demais interceptadores mantêm
 a mesma configuração.

------
<web-frame name="controller1" ...>
  <interceptor-ref name="myStack">
    <param name="interceptor2.param">value1</param>
  </interceptor-ref>
  ...
</web-frame>

<web-frame name="controller2" ...>
  <interceptor-ref name="myStack">
    <param name="interceptor2.param">value2</param>
  </interceptor-ref>
  ...
</web-frame>
------