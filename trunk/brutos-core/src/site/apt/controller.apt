O controlador

 O controlador é responsável por receber os dados e determinar qual objeto do
 modelo e visão será usada.
 Ele também é responsável por converter, validar e filtrar a entrada de dados.
 No Brutos MVC o controlador já está implementado, podendo ser usado também
 como front controller. Nos dois casos, somente é necessário fazer respectivamente
 a configuração do modelo ou controlador.
 Esse configuração nada mais é que, informar ao Brutos MVC como os dados de
 entrada serão disponibilizados no modelo (atributos ou parâmetros de um método)
 e como seu resultado será exibido (visão).
 Todo o processamento de uma aplicação usando o Brutos MVC é baseada no
 seguinte ciclo:

[./images/flow.jpg]

 * Obter modelo: O controlador recebe a requisição, examina-o e extrai a
 ID do modelo, que pode ser determinado por um URI. O Brutos MVC usa essa ID para
 localizar o modelo atual. Se o modelo não for encontrado, a requisição é
 finalizada.

 * Gerar manipulador: Nesta etapa é gerado o manipulador da requisição. O
 manipulador é composto por: modelo; identificação da requisição (ex: URI em uma
 aplicação web) e a ação a ser executada, caso
 exista uma. É neste momento que é identificada a ação a ser executada.

 * Processar interceptadores: Ocorre o processamento da pilha de interceptadores.
 Essa pilha de interceptadores pode ser criada pelo desenvolvedor. Se a pilha de
 interceptadores estiver vazia, o Brutos MVC automaticamente irá avançar
 para a próxima etapa.

 * Processar validações: É nesta etapa que ocorrem as validações. Essas validações
 podem ser criadas pelo desenvolvedor ou obtida diretamente do Brutos MVC. Os
 valores são validados de acordo com as regras de validação da aplicação. Se o
 valor for considerado errado, será marcado como inválido. Mesmo existindo um
 valor inválido, a próxima etapa, atualizar valores do modelo, será executada.

 * Atualizar valores do modelo: Esta é a etapa onde são atualizados os valores
 no lado do servidor, ou seja, a atualização das propriedades do modelo. Somente
 as propriedades configuradas serão atualizadas. Se na etapa anterior, algum
 valor foi marcado como inválido, o Brutos MVC automaticamente irá para
 a etapa final, processar visão, ignorando a etapa invocar aplicação.

 * Invocar aplicação: Nesta etapa o controlador do Brutos MVC invoca a
 aplicação. Os valores foram convertidos, validados e aplicados no modelo,
 então estará pronto para utilizar suas regras de negócio. Se ocorrer um erro,
 o Brutos MVC automaticamente irá para a próxima etapa. Tanto um erro
 (exception) quanto o tipo de resultado poderá alterar o fluxo lógico da aplicação.

 * Processar visão: Nesta etapa será exibida a tela com o resultado obtido do modelo.

Configurando uma aplicação

 Se ainda não sabe como cria uma aplicação web usando Brutos MVC, basta acessar
 {{{quick.htm}Quick Start}}.

* Controller

 Para criar um controlador é usada a tag \<controller/\>. Com essa
 tag definimos a identificação, view, a classe e entre outras recursos. Somente
 é permitido o seu uso no elemento \<controllers/\>. O elemento \<controller/\> possui
 os seguintes atributos:

*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| Atributo              | Descrição                                                                                                             |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| nome                  | Nome que identifica o bean. Usado na configuração do container IOC.                                                   |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| id                    | Identificação do controlador.                                                                                         |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| view                  | Identificação da visão.                                                                                               |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| dispatcher            | Define como o fluxo será direcionado para uma visão ou outro controlador, após a execução de uma ação.                |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| class                 | Nome completo da classe.                                                                                              |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| action-id             | Nome do parâmetro que contém a identificação da ação.                                                                 |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+
| default-action        | Ação executado por padrão.                                                                                            |
*-----------------------+-----------------------------------------------------------------------------------------------------------------------+

 Veja abaixo um trecho de XML da configuração que deve ser incluída.

------
   <controller id="/index.jbrs" view="/WEB-INF/jsp/index.jsf"
       class="br.model.Index"/>
------

 No trecho acima o conrtolador não possui nenhuma ação. Quando o controlador
 for requisitado o construtor da classe br.model.Index será invocado e será exibida
 a view /WEB-INF/jsf/index.jsf.

 No próximo exemplo a ação denominada "default" sempre será executada, caso não
 seja requisitada a execução de nenhum ação.

------
   <controller id="/index.jbrs" view="/WEB-INF/jsp/index.jsf"
       class="br.model.Index" default-action="default">
       <action id="default" executor="defMethod"/>
   </controller>
------

* Configurando as propriedades de um controlador

 Uma propriedade pode ser de tipo primitivo ou um objeto. No caso de um objeto,
 pode ser criado um mapeamento para defir como os valores da requisição serão 
 injetadas nas propriedades do objeto. Além de ser possível a configuração
 de propriedades do tipo Enum e Date.

 Também é possível fazer a validação de uma propriedade.

 A configuração de um atributo é feita com a tag \<property/\>. Somente
 é permitido o seu uso nos elementoa \<controller/\> e \<bean/\>. O elemento
 \<property/\> possui os seguintes atributos:

*------------------+--------------------------------------------------------------------+
|Atributo          | Descrição                                                          |
*------------------+--------------------------------------------------------------------+
|bean              | Identificação do valor.                                            |
*------------------+--------------------------------------------------------------------+
|name              | Nome da propriedade.                                               |
*------------------+--------------------------------------------------------------------+
|value             | Valor da propriedade.                                              |
*------------------+--------------------------------------------------------------------+
|enum-property     | Usado no mapeamento de enum. Permite dois valores:                 |
|                  | ordinal: o enum é representado por um inteiro;                     |
|                  | string: o enum é representado por uma string.                      |
*------------------+--------------------------------------------------------------------+
|temporal-property | Usado no mapeamento de datas. É o formato com que a data está      |
|                  | representada.                                                      |
|                  | O formato é descrito na classe java.text.SimpleDateFormat.         |
*------------------+--------------------------------------------------------------------+
|mapping           | Se verdadeiro, o valor da propriedade é obtido a partir de um      |
|                  | mapeamento pré-definido                                            |
*------------------+--------------------------------------------------------------------+
|scope             | Determina o escopo do valor.                                       |
*------------------+--------------------------------------------------------------------+
|factory           | Determina a classe responsável por processar o valor recebido.     |
|                  | A classe deve implementar a interface org.brandao.brutos.type.Type.|
*------------------+--------------------------------------------------------------------+

 No exemplo a seguir é feita a configuração de duas propriedades.

------
<controller id="/index.jbrs" view="/WEB-INF/jsp/index.jsf"
  class="br.model.Index">
  <property bean="cli" name="client" scope="session"/>
  <property bean="invoke" name="actionName"/>
</controller>
------

 No exemplo acima, o controlador recebe a requisição, obtém o valor com a
 identificação "invoke" da requisição e o valor com a identificação "cli" da
 sessão e envia ao objeto por meio dos seus respectivos métodos. O diagrama
 abaixo ilustra o exemplo acima.

[images/scopes.jpg]

 Como citado anteriormente, é possível construir uma propriedade através de um
 mapeamento.

 No exemplo abaixo um controlador possui uma propriedade mapeada.
 Essa propriedade é do tipo enum, sendo representada por uma string.

------
<controller ...>
   <property name="myEnum">
     <bean class="br.myproject.MyEnum" method-factory="valueOf">
       <constructor-arg>
         <ref bean="enum_value" scope="param"/>
       </constructor-arg>
     </bean>
   </property>
</controller>
------

* Configurando uma ação

 Uma ação é representada por um método. Esse método pode ter ou não parãmetros.
 Os parâmetros podem ser de tipo primitivo ou não. No caso de um objeto,
 pode ser criado um mapeamento para defir como os valores da requisição serão
 injetadas nas propriedades do objeto. Além de ser possível a configuração
 de propriedades do tipo Enum e Date.

 Também é possível fazer a validação dos parâmetros da ação.

 Se o método retornar algum valor, este seré processado e incluído na requisição,
 para posteriormente ser usada na visão. As exceções lançadas dentro do método
 podem alterar o fluxo lógico da aplicação.

 A configuração de uma ação é feita usando a tag \<action/\>. Somente é permitido
 o seu uso no elemento \<controller/\>. O elemento \<action/\> possui os seguintes
 atributos:

*------------+------------------------------------------------------------------+
| Atributo   | Descrição                                                        |
*------------+------------------------------------------------------------------+
|id          | Identificação da ação.                                           |
*------------+------------------------------------------------------------------+
|executor    | Nome do método associada a ação.                                 |
*------------+------------------------------------------------------------------+
|result      | Identificação do resultado da ação. Se a ação retornar algum     |
|            | valor, esse valor será disponibilizado na visão com essa         |
|            | identificação.                                                   |
*------------+------------------------------------------------------------------+
|view        | Identificação da visão a ser usada na ação.                      |
*------------+------------------------------------------------------------------+
|dispatcher  | Define como o fluxo será direcionado para uma visão ou outro     |
|            | controlador, após a execução de uma ação.                        |
*------------+------------------------------------------------------------------+

 Veja o exemplo a seguir:

------
<controller id="/index.jbrs" view="/WEB-INF/jsp/index.jsf"
  class="br.model.Index">
  <action id="add" executor="addClient"/>
</controller>
------

 No exemplo acima a classe Index possui o método addClient, que não retorna
 nenhum valor e não possui parâmetros. Esse metodo está associada á ação "add".

 No próximo exemplo é feita a configuração de uma ação que retorna um valor
 booleano com a identificação result.

------
<action id="add" executor="addClient" result="result"
  view="/WEB-INF/jsp/add_cli.jsf"/>
------

 No exemplo acima, o controlador recebe a requisição, executa a açao "add",
 ou seja, invoca o método addClient e exibe a visão add_client.jsf, onde é
 usado o resultado obtido da execução da ação "add". O diagrama abaixo ilustra
 a execução dessa ação.

[images/action1.jpg]

 No próximo exemplo a visão irá depender de qual ação seré executada.

------
<controller id="/index.jbrs" view="/WEB-INF/jsp/show_cli.jsf"
           class="br.model.Index">
          <action id="add" executor="addClient"
               view="/WEB-INF/jsp/add_cli.jsf"/>
          <action id="remove" executor="removeClient"
               view="/WEB-INF/jsp/remove_cli.jsf"/>
</controller>
------

 No exemplo acima, o controlador recebe a requisição e identifica qual ação será
 executada. Se a ação identificada for "add", então o método addClient da classe
 Index é invocado e a visão add_cli.jsf é usada. Se a ação identificada for
 "remove", então o método removeClient é invocado e a visão remove_cli.jsf é
 usada. Caso não seja executada nenhuma ação a visão show_cli.jsf será usada.
 O diagrama abaixo ilustra o funcionamento do controlador.

[images/views.jpg]

* Configurando parâmetros de uma ação

 Um parâmetro de uma ação pode ser de tipo primitivo ou um objeto. No caso de um objeto,
 pode ser criado um mapeamento para defir como os valores da requisição serão
 injetadas nas propriedades do objeto. Além de ser possível a configuração
 de propriedades do tipo Enum e Date.

 Também é possível fazer a validação de uma propriedade.

 A configuração de um parâmetro é feita usando a tag
 \<parameter/\>. Somente é permitido o seu uso no elemento \<action/\>.
 O elemento \<parameter/\> possui os seguintes atributos:

*------------------+--------------------------------------------------------------------+
|Atributo          | Descrição                                                          |
*------------------+--------------------------------------------------------------------+
|bean              | Identificação do valor.                                            |
*------------------+--------------------------------------------------------------------+
|value             | Valor do parâmetro.                                                |
*------------------+--------------------------------------------------------------------+
|enum-property     | Usado no mapeamento de enum. Permite dois valores:                 |
|                  | ordinal: o enum é representado por um inteiro;                     |
|                  | string: o enum é representado por uma string.                      |
*------------------+--------------------------------------------------------------------+
|temporal-property | Usado no mapeamento de datas. É o formato com que a data está      |
|                  | representada.                                                      |
|                  | O formato é descrito na classe java.text.SimpleDateFormat.         |
*------------------+--------------------------------------------------------------------+
|mapping           | Se verdadeiro, o valor do parâmetro é obtido a partir de um        |
|                  | mapeamento pré-definido                                            |
*------------------+--------------------------------------------------------------------+
|scope             | Determina o escopo do valor.                                       |
*------------------+--------------------------------------------------------------------+
|factory           | Determina a classe responsável por processar o valor recebido.     |
|                  | A classe deve implementar a interface org.brandao.brutos.type.Type.|
*------------------+--------------------------------------------------------------------+
| type	           | Tipo do parâmetro.                                                 |
*------------------+--------------------------------------------------------------------+

 Veja abaixo um exemplo:

------
<controller id="/index.jbrs" view="/WEB-INF/jsp/show_cli.jsf"
           class="br.model.Index">
          <action id="add" executor="addClient"
               view="/WEB-INF/jsp/add_cli.jsf">
               <parameter bean="nome" type="java.lang.String"/>
               <parameter bean="idade" type="int"/>
               <parameter bean="userId" type="User" scope="session"/>
          </action>
</controller>
------

 No exemplo acima o controlador recebe a requisiçãoo, invoca o método addClient
 passado o nome, idade e userId, respectivamente para os parâmetros v1,
 v2 e v3 do método. Os valores nome e idade são obtidos da requisição e o userId
 é obtido da sessão. O diagrama abaixo ilustra o exemplo acima.

[images/action2.jpg]

 Como citado anteriormente, é possível construir um parâmetro através de um 
 mapeamento.

 No exemplo abaixo uma ação possui um parâmetro mapeado.
 Esse parâmetro é do tipo enum, sendo representado por uma string.

------
<controller ...>
   <action id="myAction" executor="myMethod">
     <parameter>
         <bean class="br.myproject.MyEnum" method-factory="valueOf">
           <constructor-arg>
             <ref bean="enum_value" scope="param"/>
           </constructor-arg>
         </bean>
     </parameter>
   </action>
</controller>
------

* Tratando exceções

 As exceções lançadas na execução de uma ação podem ser tratadas e também
 podem influenciar no fluxo lógico da aplicação. É possível determinar qual
 visão será utilizada, como o fluxo da execução da ação será direcionada para uma visão
 ou outro controlador, alem de ser possível atribuir uma identificação ao objeto,
 exception, obtido. 

 O tratamento das exceções são feitas com a tag \<throw-safe/\>. Somente é
 permitido o seu uso nos elementos \<controller/\> e \<action/\>.
 O elemento \<throw-safe/\> possui os seguintes atributos:

*----------+--------------------------------------------------------------+
| Atributo | Descrição                                                    |
*----------+--------------------------------------------------------------+
| name     | Identificação da exceção.                                    |
*----------+--------------------------------------------------------------+
| target   | A exceção alvo da configuração.                              |
*----------+--------------------------------------------------------------+
| view     | Identificação da visão.                                      |
*----------+--------------------------------------------------------------+
|dispatcher| Define como o fluxo será direcionado para uma visão ou outro |
|          | controlador, após o lançamento da exceção.                   |
*----------+--------------------------------------------------------------+

 Veja abaixo um exemplo:

------
<action id="login" executor="login" dispatcher="redirect"
    view="/index.jbrs">
    <parameter bean="e-mail" type="java.lang.String"/>
    <parameter bean="senha" type="java.lang.String"/>
    <throw-safe target="java.lang.NullPointerException" name="exception"
        view"/WEB-INF/jsp/login.jsf"/>
    <throw-safe target="LoginException" name="exception"
        view="/WEB-INF/jsp/login.jsf"/>
</action>
------

 No exemplo acima, o usuário fará o login. Se for o primeiro acesso, será
 lançada NullPointerException, pois ainda não possui os dados necessários
 para o login, e é usada a visão de login. Se a identificação ou a senha
 estiver errada, então será lançada LoginException sendo usada a página de
 login. Se a identificação e a senha estiverem corretas, então será redirecionado
 para a visão index.jbrs.

[images/exception.jpg]

 No diagrama acima foram considerados três fluxos de execução. São eles:

 * ocorre NullPointerException e a vião login.jsf é exibida.

 * ocorre LoginException e a visão login.jsf é exibida, caso o login ou a senha
   esteja errada.

 * não ocorre nenhuma exceção e o controlador redireciona para a visão index.jbrs.

* Incluindo parâmetros no caminho de uma URI

 Em alguns casos é mais elegante que os parâmetros de uma requisição web faça
 parte do caminho da URI. Por exemplo, tempo uma URI no formato /item.jbrs?id=100.
 Não seria melhor se fosse assim /item/100-title_of_my_item.jbrs.

 Com o Bruto MVC é possível e simples. Abaixo segue um trecho XML exemplificando
 como seria a configuração de um controlador para a URI citada anteriormente.

-----
<controller class="br.myproject.MyController">
  <action id="/item/{id}-{title}.jbrs">
    <parameter bean="id" type="int"/>
    <parameter bean="title" type="java.lang.String"/>
  </action>
</controller>
-----

 Também é possível impedir que certos valores sejam aceitos. Se no exemplo acima
 quisermos que id aceite somente digitos 0-9, basta fazer como segue:

-----
<controller class="br.myproject.MyController">
  <action id="/item/{id:\\d+}-{title}.jbrs">
    <parameter bean="id" type="int"/>
    <parameter bean="title" type="java.lang.String"/>
  </action>
</controller>
-----

 Note que no exemplo acima, apenas foi necessário incluir ":\\d+", onde
 ":" é o delimitador entre a indentificação do parâmetro e a expressão regular,
 que no exemplo acima é "\\d+".

