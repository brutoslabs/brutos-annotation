File upload

 O Brutos MVC possui suporte nativo ao upload de arquivos. Sendo possível configurar
 o tamanho máximo dos dados a serem recebidos e o local que os arquivos serão
 gravados. Se preferir é possível usar uma API para fazer o upload, como por
 exemplo o Jakarta Commons-FileUpload.

* Definindo o tamanho máximo e o repositório de arquivos

 Para definir o tamanho máximo você deve usar a variável
 org.brandao.brutos.request.max_length dentro da tag \<params/\> no
 arquivo brutos-config.xml ou se preferir pode ser informado no web.xml.

 ex:

------
<params>
      ...
      <param name="org.brandao.brutos.request.max_length"
                     value="3145728"/> <!-- 3 MB -->
</params>
------

 Para definir o repositório de arquivos você deve usar a variável
 org.brandao.brutos.request.path dentro da tag \<params/\> no arquivo
 brutos-config.xml ou se preferir pode ser informado no web.xml. Se omitido será gerado um arquivo temporário por arquivo enviado.

 ex:

------
<params>
      ...
      <param name="org.brandao.brutos.request.path"
                     value="${web.root}/WEB-INF/files/"/>
</params>
------

 Perceba no exemplo abaixo como é fácil fazer o upload de arquivos.

 O controlador a seguir tem dois métodos. O primeiro recebe o arquivo
 ( upload )  e o segundo envia o arquivo ( download ).

 Controlador:

------
public class FileController{

    private String repositoryPath;

    public FileController( String repositoryPath ){
        this.repositoryPath = repositoryPath;
    }

    public void uploadFile( File file ){
        ...
    }

    public File download( String fileName ){
        File file = new File( repositoryPath + "/" + fileName );
        return file;
    }

}
------

 Configuração:

------
<controller id="/filemanager.jbrs" view="filemanager.jsp"
class="FileController" action-id="action" >

   <action id="upload" executor="upload">
       <parameter type="java.io.File" bean="arq"/>
   </action>

   <action id="download" executor="download">
       <parameter type="java.lang.String" bean="name"/>
   </method>

</controller>
------

 Visão:

------
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title></title>
    </head>
    <body>
            <form method="POST" enctype="multipart/form-data" action="filemanager.jbrs">
                <table width="100%" cellpadding="0" cellspacing="0" >
                    <tr>
                        <td width="100%">File:</td>
                    </tr>
                    <tr>
                        <td width="100%"><input type="file"
                        name="arq" size="20"></td>
                    </tr>
                    <tr>
                        <td width="100%"><input type="submit"
                        name="action" value="upload"></td>
                    </tr>
                </table>
            </form>
    </body>
</html>
------

 Para fazer o download do arquivo é só acessar o URI:
 /filemanager.jbrs?action=download&name=nome_do_arquivo

* Customizando o upload de arquivos

 Se preferir, é possível que você customize o processamento dos arquivos recebidos em uma requisição.

 O processamento de uma requisição no Brutos web MVC é feito por meio da implementação dos métodos da interface org.brandao.brutos.web.http.HttpRequestParser. Mas é aconselhável herdar as características da classe org.brandao.brutos.web.http.HttpRequestParserImp.

 Veja o exemplo abaixo:

-----
 package br.com.fileupload;

 import java.io.File;
 import java.io.IOException;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Properties;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.servlet.http.HttpServletRequest;
 import org.apache.commons.fileupload.FileItem;
 import org.apache.commons.fileupload.FileUploadException;
 import org.apache.commons.fileupload.disk.DiskFileItemFactory;
 import org.apache.commons.fileupload.servlet.ServletFileUpload;
 import org.brandao.brutos.BrutosException;

 public class ApacheFileUploadsParser extends HttpRequestParserImp{

     public void parserMultipart(BrutosRequest request, Properties config,
             UploadListener uploadListener) throws IOException{

         Long maxLength =
             Long.parseLong(
                 config
                     .getProperty( "org.apache.fileupload.max_length", "0" ) );
         String path = config
                     .getProperty( "org.apache.fileupload.path", null );

         DiskFileItemFactory factory = new DiskFileItemFactory();
         factory.setRepository(new File(path));
         ServletFileUpload upload = new ServletFileUpload(factory);
         upload.setSizeMax(maxLength);
         List list;

         try {
             list = upload
                 .parseRequest(
                     (HttpServletRequest) request.getServletRequest());
         } catch (FileUploadException ex) {
             throw new org.brandao.brutos.web.FileUploadException(ex);
         }

         Iterator iter = list.iterator();
         while( iter.hasNext() ){
              FileItem item = (FileItem) iter.next();

              if( item.isFormField() ){
                 String name = item.getFieldName();
                 String value = item.getString();
                 request.setObject(name, value);
              }
              else{
                 String fieldName = item.getFieldName();
                 String fileNameParts[] = item.getName().split("\\\\");
                 String name = fileNameParts[ fileNameParts.length - 1 ];
                 File file = new File( new File(path), name );
                 file.createNewFile();
                 try {
                     item.write(file);
                 } catch (Exception ex) {
                     throw new BrutosException(ex);
                 }
                 BrutosFile f = new BrutosFile( file );
                 f.setContentType( item.getContentType() );
                 f.setFile(file);
                 f.setFileName(item.getName());
                 request.setObject(fieldName, f);
              }
         }

     }

 }
-----

 Depois de criado o parser, é necessário informar ao Brutos web MVC qual parser
 usar e para isso basta incluir as seguintes linhas no web.xml:

-----
<context-param>
    <param-name>org.brandao.brutos.request_parser</param-name>
    <param-value>br.com.fileupload.ApacheFileUploadsParser</param-value>
</context-param>
-----
